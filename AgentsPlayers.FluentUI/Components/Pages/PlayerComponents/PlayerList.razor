@page "/Players"
@rendermode InteractiveServer
@inject IDialogService DialogService

@using AgentsPlayers.Domain.Entities
@using AgentsPlayers.ServicesInterfaces

<h3>Players</h3>

<div style="float:inline-end">
<FluentButton Appearance="Appearance.Accent" @onclick="ShowAddModal">Add New Player</FluentButton>
</div>
<br />
@if (players == null)
{
    <span>Loading...</span>
}

else
{
    <FluentDataGrid Items="@players"
        GenerateHeader="GenerateHeaderOption.Sticky"
                    ResizableColumns=true
                    Pagination="@pagination"
                    Style="width: 100%; height: 500px;overflow:auto;">

        <PropertyColumn Property="@(p=>p.FullName)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.DateOfBirth)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.Nationality)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.Position)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.Height)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.Weight)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.MarketValue)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.PreferredFoot)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.ContractExpirationDate)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.CurrentClub)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.Agent)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.AwardsAndAchievements)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.HealthStatus)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.Languages)" Sortable="true" />
             <TemplateColumn Title="Actions" Align="@Align.End">
            <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => OpenDialogAsync(context))" />
        <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeletePlayer(context))" />
       
        </TemplateColumn>

    </FluentDataGrid>
    <FluentPaginator State="@pagination" />
}

@code {
    [Inject] IPlayerService PlayerService { get; set; }

    private IQueryable<Player> players;
    private AddEditPlayerDialog addEditBookDialog;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    protected override async Task OnInitializedAsync()
    {
        await LoadPlayers();
    }

    private async Task LoadPlayers()
    {
        players = (await PlayerService.GetAll()).AsQueryable();
        StateHasChanged();
    }
    private async Task OpenDialogAsync(Player player)
    {
        DialogParameters parameters = new DialogParameters()
            {
                Title = ((player.Id == 0) ? "Add Player" : "Edit Player"),
                PrimaryAction = "Yes",
                PrimaryActionEnabled = false,
                SecondaryAction = "No",
                Width = "2000px",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };
        var dialog = await DialogService.ShowDialogAsync<AddEditPlayerDialog>(player, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled && result.Data != null)
        {
            player = (Player)result.Data;
            LoadPlayers();
        }

    }


    private async Task ShowAddModal()
    {
        await OpenDialogAsync(new Player());
    }

    private async void DeletePlayer(Player player)
    {
       await PlayerService.Delete(player);
        await LoadPlayers();
    }

    private async void RefreshList()
    {
      await LoadPlayers();
    }
}
