@page "/agents"
@rendermode InteractiveServer
@inject IDialogService DialogService
@using AgentsPlayers.Domain.Entities
@using AgentsPlayers.ServicesInterfaces

<h3>Agents</h3>

<div style="float:inline-end">
    <FluentButton Appearance="Appearance.Accent" @onclick="ShowAddModal">Add New Agent</FluentButton>
</div>

<br />

@if (agents == null)
{
    <span>Loading...</span>
}

else
{

    <FluentDataGrid Items="@agents"
                    GenerateHeader="GenerateHeaderOption.Sticky"
                    ResizableColumns=true
                    Pagination="@pagination"
                    Style="width: 100%; height: 405px;overflow:auto;">

        <PropertyColumn Property="@(p=>p.FullName)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.PhoneNumber)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.EmailAddress)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.Experience)" Sortable="true" />
        <TemplateColumn Title="Actions" Align="@Align.End">
            <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => OpenDialogAsync(context))" />
            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeleteBook(context))" />
        </TemplateColumn>
    </FluentDataGrid>

    <FluentPaginator State="@pagination" />


}
@code {
    [Inject] IAgentService AgentService { get; set; }
    private IQueryable<Agent> agents;
    private AddEditAgentDialog addEditAgentDialog;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    protected override async Task OnInitializedAsync()
    {
        await LoadAgents();
    }
    private async Task LoadAgents()
    {
        agents = (await AgentService.GetAll()).AsQueryable();
        StateHasChanged();
    }
    private async Task OpenDialogAsync(Agent agent)
    {
        DialogParameters parameters = new DialogParameters()
            {
                Title = ((agent.Id == 0) ? "Add Agent" : "Edit Agent"),
                PrimaryAction = "Yes",
                PrimaryActionEnabled = false,
                SecondaryAction = "No",
                Width = "800px",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };
        var dialog = await DialogService.ShowDialogAsync<AddEditAgentDialog>(agent, parameters);
        var result = await dialog.Result;

        if (!result.Cancelled && result.Data != null)
        {
            await LoadAgents();
        }

    }

    private async Task ShowAddModal()
    {
        await OpenDialogAsync(new Agent());
    }

    private async void DeleteBook(Agent agent)
    {
        await AgentService.Delete(agent);
        await LoadAgents();
    }
    private async void RefreshList()
    {
        await LoadAgents();
    }
}
